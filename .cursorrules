# About This Project

This project is a monorepo that contains all of the packages that make up our SaaS starter kit. It is a Laravel
application that requires all of our packages and contains demos of many of them. Each subdirectory of the packages
directory is a stand-alone PHP package, hosted on GitHub (we use Git Subtree Split to keep them up to date with our
work here).

When working on a feature within this project, make sure that you are working in the most appropriate directory within
the packages/ directory unless you are building out demo material within the app itself.

When doing any work within a subdirectory of packages, if you reference any classes or components within another
subdirectory of packages, make sure that the composer.json of the package you are working on requires the package on
which you are depending.

We are trying to keep each package as narrowly focused as possible. Here are some important guidelines:

1. Do not duplicate functionality between packages. If functionality that you require exists in another package, use it
and make sure that the package you are working on is set up to require the package that contains the functionality.

2. When there might be multiple implementations of something (such as using different third party providers), the
package should simply provide contracts. Each implementation should live within its own package that contains everything
required to fulfill all of those contracts.

Do not work beyond the scope of any request. Keep your changes small. We prefer to iterate with small changes over
making large sweeping changes.

# Lessons Learned

When using Verbs events:
- Don't instantiate events and build them up manually (don't use `new Event()` and set properties)
- Instead, use static methods `fire()` or `commit()` directly on the event class with named arguments
- Use `commit()` when you need the result back from the event's handle method
- Use `Verbs::commitImmediately()` in tests to ensure events are processed immediately
- Name event classes in the past tense to indicate they represent something that has happened (e.g., `EmailVerificationNotificationSent` instead of `SendEmailVerificationNotification`)

Code Style and Architecture:
- Prefer direct actions over Laravel's event system. Instead of dispatching Laravel events that are handled by listeners, perform the actions directly in Verbs events. This makes the code more explicit and easier to follow.
- Example: Instead of `event(new Registered($user))` which triggers a listener to send a verification email, directly call `$user->notify(new VerifyEmail)` in the Verbs event.

Creating Draft PRs:
- Save PR description to a temporary file (e.g., `pr_description.txt`)
- Use GitHub CLI to create a draft PR: `gh pr create --draft --title "title" --body-file pr_description.txt`
- Clean up by removing the temporary file after PR is created
- This workflow makes it easy to prepare and edit the PR description before submitting

# Scratch Pad

## Verbstream Database Operations to Convert to Verbs Events

### Team Management
- [x] Create Team (TeamController@store)
  - Create team record
  - Set owner as first member
  - Set as current team for owner

- [x] Update Team Name (TeamController@update)
  - Update team name

- [x] Delete Team (TeamController@destroy)
  - Delete team record
  - Remove all team members
  - Update current_team_id for all members

- [x] Switch Current Team (CurrentTeamController@update)
  - Update user's current_team_id

### Team Members
- [x] Add Team Member (TeamController@addTeamMember)
  - Create team-user pivot record
  - Set role for new member

- [x] Update Team Member Role (TeamController@updateTeamMemberRole)
  - Update role in team-user pivot record

- [x] Remove Team Member (TeamController@removeTeamMember)
  - Remove team-user pivot record
  - Update user's current_team_id if needed

### Team Invitations
- [x] Create Team Invitation (TeamInvitationController@store)
  - Create team invitation record

- [x] Accept Team Invitation (TeamInvitationController@accept)
  - Add user to team with invited role
  - Delete invitation
  - Set as current team if user has no current team

### User Profile
- [x] Update Profile Information (UserProfileController@update)
  - Update user record with new name/email
  - Handle email verification if email changed

- [ ] Update Profile Photo
  - Update user's profile_photo_path
  - Handle photo storage

### API Tokens
- [ ] Create API Token (ApiTokenController@store)
  - Create new token record

- [ ] Update API Token Permissions (ApiTokenController@updateApiToken)
  - Update token abilities

- [ ] Delete API Token (ApiTokenController@deleteApiToken)
  - Delete token record

### Fortify Actions to Override
- [ ] Two Factor Authentication
  - Enable/disable 2FA
  - Confirm 2FA
  - Generate/regenerate recovery codes
  - Store 2FA settings and recovery codes

- [ ] Password Management
  - Update password
  - Reset password
  - Confirm password

- [ ] Browser Sessions
  - Log out other browser sessions
  - Update session data

### Already Converted
- [x] Create User with Personal Team (UserCreated event)
  - Create user record
  - Create personal team
  - Create team-user pivot record
  - Set current_team_id

- [x] Send Email Verification (EmailVerificationNotificationSent event)
  - Send verification email
  - Track verification status
